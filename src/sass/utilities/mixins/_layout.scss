// LAYOUT

/// Set the vertical and horizontal alignment of items in a flex container.
///
/// @param {String} $align-items     [stretch]    - The vertical alignment.
/// @param {String} $justify-content [flex-start] - The horizontal alignment.
@mixin flex-align($align-items: stretch, $justify-content: flex-start) {
  align-items: $align-items;
  justify-content: $justify-content;
}

/// Set the span of a grid item using `grid-column-start` and `grid-column-end`.
///
/// @param {String} $grid-col-start - The beginning column for the item.
/// @param {String} $grid-col-end - The ending column for the item.
@mixin grid-span($grid-col-start, $grid-col-end) {
  grid-column-end: $grid-col-end;
  grid-column-start: $grid-col-start;
}

/// Vertically centers an item with absolute positioning. Make sure parent is `position: relative`.
///
/// @example scss - Sample Usage
///  .box {
///    position: relative;
///  }
///
///  .item {
///    @include vertical-center;
///  }
@mixin vertical-center {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

/// Horizontally centers an item with absolute positioning. Make sure parent is `position: relative`.
///
/// @example scss - Sample Usage
///  .box {
///    position: relative;
///  }
///
///  .item {
///    @include horizontal-center;
///  }
@mixin horizontal-center {
  left: 50%;
  position: absolute;
  transform: translateX(-50%);
}

/// Horizontally and vertically centers an item with absolute positioning. Make sure parent is `position: relative`.
///
/// @example scss - Sample Usage
///  .box {
///    position: relative;
///  }
///
///  .item {
///    @include absolute-center;
///  }
@mixin absolute-center {
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
}
