{
  "accordion": {
    "title": "Accordion",
    "content": {
      "data": [
        {
          "title": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit.",
          "content": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede."
        },
        {
          "title": "Aliquam tincidunt mauris eu risus.",
          "content": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede."
        },
        {
          "title": "Vestibulum auctor dapibus neque.",
          "content": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede."
        },
        {
          "title": "Nunc dignissim risus id metus.",
          "content": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede."
        },
        {
          "title": "Cras ornare tristique elit.",
          "content": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede."
        }
      ]
    },
    "code": {
      "templated": {
        "language": "handlebars",
        "code": "<ul class=\"accordion list-reset\" role=\"presentation\">\r\n      {{#each content.data}}\r\n      <li class=\"accordion__item\">\r\n        <h3 id=\"{{camelCase title}}\" class=\"accordion__title\">\r\n          {{title}}\r\n          <button class=\"toggle toggle--plus-minus screen-reader-text\" aria-controls=\"{{camelCase title}}Content\" aria-expanded=\"false\">\r\n            <span class=\"screen-reader-text\">Toggle<\/span>\r\n          <\/button>\r\n        <\/h3>\r\n        <div id=\"{{camelCase title}}Content\" class=\"accordion__content\">\r\n          {{content}}\r\n        <\/div>\r\n      <\/li>\r\n      {{\/each}}\r\n    <\/ul>"
      },
      "styles": {
        "language": "scss",
        "code": "\/\/ ============================================================================\r\n\/\/ ACCORDION\r\n\/\/ ============================================================================\r\n\r\n\/\/ Accordion variables.\r\n$toggle-color: $color-primary;\r\n\r\n\/\/ Helper classes.\r\n.list-reset {\r\n  @include list-reset;\r\n}\r\n\r\n.screen-reader-text {\r\n  @include screen-reader-text;\r\n}\r\n\r\n\/\/ Accordion component.\r\n.accordion {\r\n\r\n  &__title {\r\n    align-items: center;\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  &__content {\r\n    height: 0;\r\n    max-height: 0;\r\n    opacity: 0;\r\n    overflow: hidden;\r\n    transition: all 0.5s ease-in-out, opacity 0.6s ease-in-out;\r\n  }\r\n\r\n  &__item {\r\n\r\n    + .accordion__item {\r\n      margin-top: rem(20);\r\n    }\r\n\r\n    &--expanded {\r\n      .accordion__content {\r\n        height: 100%;\r\n        max-height: 1000vh;\r\n        opacity: 1;\r\n        padding-bottom: rem(40);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\/\/ Toggle buttons.\r\n.toggle {\r\n  @include plus-minus-button($toggle-color, $bar-width: rem(15));\r\n\r\n  &[aria-expanded=\"true\"] {\r\n    @include plus-minus-button-active($toggle-color);\r\n  }\r\n}\r\n"
      },
      "scripts": {
        "language": "javascript",
        "code": "\/**\r\n * Accordion functionality.\r\n *\r\n * @class Accordion\r\n *\/\r\nclass Accordion {\r\n  constructor() {\r\n    this.items = Array.from(document.querySelectorAll('.accordion__item'));\r\n    this.firstItem = this.items[0];\r\n    this.lastItem = this.items[this.items.length - 1];\r\n    this.keyCodes = Object.freeze({\r\n      RETURN: 13,\r\n      ESC: 27,\r\n      SPACE: 32,\r\n      END: 35,\r\n      HOME: 36,\r\n      UP: 38,\r\n      DOWN: 40\r\n    });\r\n\r\n    this.bindEvents();\r\n  }\r\n\r\n  \/**\r\n   * Expands an accordion panel.\r\n   *\r\n   * @param {string} toggle The toggle button element.\r\n   * @memberof Accordion\r\n   *\/\r\n  activatePanel(toggle) {\r\n    const parent = toggle.parentElement.parentElement;\r\n\r\n    toggle.setAttribute('aria-expanded', 'true');\r\n    parent.classList.add('accordion__item--expanded');\r\n  }\r\n\r\n  \/**\r\n   * Collapses an accordion panel.\r\n   *\r\n   * @param {string} toggle The toggle button element.\r\n   * @memberof Accordion\r\n   *\/\r\n  deactivatePanel(toggle) {\r\n    const parent = toggle.parentElement.parentElement;\r\n\r\n    toggle.setAttribute('aria-expanded', 'false');\r\n    parent.classList.remove('accordion__item--expanded');\r\n  }\r\n\r\n  \/**\r\n   * Determines which method to fire based on target.\r\n   *\r\n   * @param {object} event The event object.\r\n   * @returns {boolean} Whether a subsequent action was fired.\r\n   * @memberof Accordion\r\n   *\/\r\n  handleClickEvent(event) {\r\n    const target = event.target.closest('.toggle');\r\n\r\n    if (target && target.getAttribute('aria-expanded') === 'false') {\r\n      this.activatePanel(target);\r\n      return true;\r\n    }\r\n\r\n    if (target && target.getAttribute('aria-expanded') === 'true') {\r\n      this.deactivatePanel(target);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  \/**\r\n   * Determines which method to fire based on target and keypress.\r\n   *\r\n   * @param {object} event The event object.\r\n   * @returns {boolean} Whether a subsequent action was fired.\r\n   * @memberof Accordion\r\n   *\/\r\n  handleKeydownEvent(event) {\r\n    const key = event.keyCode,\r\n      target = event.target,\r\n      listItem = target.parentElement.parentElement;\r\n\r\n    let newTarget;\r\n\r\n    switch (key) {\r\n      case this.keyCodes.DOWN:\r\n        event.preventDefault();\r\n\r\n        if (listItem !== this.lastItem) {\r\n          newTarget = listItem.nextElementSibling.querySelector('.toggle');\r\n        } else {\r\n          newTarget = this.firstItem.querySelector('.toggle');\r\n        }\r\n        newTarget.focus();\r\n        return true;\r\n\r\n      case this.keyCodes.UP:\r\n        event.preventDefault();\r\n\r\n        if (listItem !== this.firstItem) {\r\n          newTarget = listItem.previousElementSibling.querySelector('.toggle');\r\n        } else {\r\n          newTarget = this.lastItem.querySelector('.toggle');\r\n        }\r\n        newTarget.focus();\r\n        return true;\r\n\r\n      case this.keyCodes.HOME:\r\n        event.preventDefault();\r\n\r\n        newTarget = this.firstItem.querySelector('.toggle');\r\n        newTarget.focus();\r\n        return true;\r\n\r\n      case this.keyCodes.END:\r\n        event.preventDefault();\r\n\r\n        newTarget = this.lastItem.querySelector('.toggle');\r\n        newTarget.focus();\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  \/**\r\n   * Binds the accordion events to the page.\r\n   *\r\n   * @memberof Accordion\r\n   *\/\r\n  bindEvents() {\r\n    document.addEventListener('click', this.handleClickEvent.bind(this));\r\n    document.addEventListener('keydown', this.handleKeydownEvent.bind(this));\r\n  }\r\n}\r\n\r\nexport default Accordion;\r\n"
      }
    }
  },
  "tabs": {
    "title": "Tabs",
    "label": "Tab example",
    "content": {
      "data": [
        {
          "title": "Lorem ipsum",
          "content": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede."
        },
        {
          "title": "Aliquam",
          "content": "Donec nec justo eget felis facilisis fermentum. Aliquam porttitor mauris sit amet orci. Aenean dignissim pellentesque felis."
        },
        {
          "title": "Vestibulum",
          "content": "Morbi in sem quis dui placerat ornare. Pellentesque odio nisi, euismod in, pharetra a, ultricies in, diam. Sed arcu. Cras consequat."
        },
        {
          "title": "Nunc dignissim",
          "content": "Praesent dapibus, neque id cursus faucibus, tortor neque egestas auguae, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus."
        },
        {
          "title": "Cras ornare tristique elit.",
          "content": "Phasellus ultrices nulla quis nibh. Quisque a lectus. Donec consectetuer ligula vulputate sem tristique cursus. Nam nulla quam, gravida non, commodo a, sodales sit amet, nisi."
        }
      ]
    },
    "code": {
      "templated": {
        "language": "handlebars",
        "code": "<div class=\"tabs\">\r\n      <div class=\"tabs__navigation\" role=\"tablist\" aria-label=\"{{label}}\">\r\n        {{#each content.data}}\r\n          <button id=\"{{camelCase title}}\" class=\"tabs__button\" role=\"tab\" aria-selected=\"false\" aria-controls=\"{{camelCase title}}-tab\" tabindex=\"-1\">{{title}}<\/button>\r\n        {{\/each}}\r\n      <\/div>\r\n\r\n      {{#each content.data}}\r\n        <div id=\"{{camelCase title}}-tab\" class=\"tabs__panel\" role=\"tabpanel\" aria-labelledby=\"{{camelCase title}}\" hidden=\"\" tabindex=\"0\">\r\n          {{content}}\r\n        <\/div>\r\n      {{\/each}}\r\n    <\/div>"
      },
      "styles": {
        "language": "scss",
        "code": "\/\/ ============================================================================\r\n\/\/ TABS\r\n\/\/ ============================================================================\r\n\r\n$tabs-background-color: $white;\r\n$tabs-border-color: $gray-chateau;\r\n$tabs-active-tab-color: $color-accent;\r\n$tabs-button-font: $base-font-family;\r\n\r\n.tabs {\r\n\r\n  &__navigation {\r\n    border: 1px solid $tabs-border-color;\r\n    border-bottom: none;\r\n\r\n    @include mq-min($tablet-portrait) {\r\n      border: none;\r\n      display: flex;\r\n    }\r\n  }\r\n\r\n  &__button {\r\n    background-color: $white;\r\n    display: block;\r\n    font-family: $tabs-button-font;\r\n    padding: rem(10);\r\n    width: 100%;\r\n\r\n    &--active {\r\n\r\n      @include mq-min($tablet-portrait) {\r\n        border: 1px solid $tabs-border-color;\r\n        border-bottom: 0;\r\n        margin-bottom: -1px;\r\n        z-index: 1;\r\n      }\r\n    }\r\n\r\n    + .tabs__button {\r\n\r\n      @include mq-max($tablet-portrait) {\r\n        border-top: 1px solid $tabs-border-color;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__panel {\r\n    border: 1px solid $tabs-border-color;\r\n    padding: rem(20);\r\n    position: relative;\r\n  }\r\n}\r\n"
      },
      "scripts": {
        "language": "javascript",
        "code": "class Tabs {\r\n  constructor(selector) {\r\n    this.instance = document.querySelector(selector);\r\n    this.items = Array.from(this.instance.querySelectorAll('.tabs__button'));\r\n    this.firstItem = this.items[0];\r\n    this.lastItem = this.items[this.items.length - 1];\r\n    this.keyCodes = Object.freeze({\r\n      END: 35,\r\n      HOME: 36,\r\n      LEFT: 37,\r\n      RIGHT: 39\r\n    });\r\n\r\n    this.init();\r\n  }\r\n\r\n  \/**\r\n   * Set the active tab and panel, add the event listeners.\r\n   *\r\n   * @memberof Tabs\r\n   *\/\r\n  init() {\r\n    const panelID = this.firstItem.getAttribute('aria-controls');\r\n\r\n    let panel = document.getElementById(panelID);\r\n\r\n    this.firstItem.setAttribute('aria-selected', 'true');\r\n    this.firstItem.removeAttribute('tabindex');\r\n    this.firstItem.classList.add('tabs__button--active');\r\n    panel.removeAttribute('hidden');\r\n    panel.classList.add('tabs__panel--active');\r\n\r\n    this.instance.addEventListener('click', this.handleClickEvents.bind(this));\r\n    this.instance.addEventListener('keyup', this.handleKeyupEvents.bind(this));\r\n  }\r\n\r\n  \/**\r\n   * Gets current tab and target tab info and passes info onto action methods.\r\n   *\r\n   * @param {string} target The tab to be activated.\r\n   * @memberof Tabs\r\n   *\/\r\n  showTabContent(target) {\r\n    const component = target.closest('.tabs'),\r\n      panelID = target.getAttribute('aria-controls'),\r\n      currentTab = component.querySelector('.tabs__button--active'),\r\n      currentContent = component.querySelector('.tabs__panel--active'),\r\n      newContent = document.getElementById(panelID);\r\n\r\n    this.deactivateTab(currentTab, currentContent);\r\n\r\n    this.activateTab(target, newContent);\r\n  }\r\n\r\n  \/**\r\n   * Deactivates an active tab and panel.\r\n   *\r\n   * @param {string} tab The tab to deactivate.\r\n   * @param {string} panel The panel to deactivate.\r\n   * @memberof Tabs\r\n   *\/\r\n  deactivateTab(tab, panel) {\r\n    tab.setAttribute('aria-selected', 'false');\r\n    tab.classList.remove('tabs__button--active');\r\n    panel.classList.remove('tabs__panel--active');\r\n    panel.setAttribute('hidden', 'true');\r\n  }\r\n\r\n  \/**\r\n   * Activates an inactive tab and panel.\r\n   *\r\n   * @param {string} tab The tab to activate.\r\n   * @param {string} panel The pane to activate.\r\n   * @memberof Tabs\r\n   *\/\r\n  activateTab(tab, panel) {\r\n    tab.setAttribute('aria-selected', 'true');\r\n    tab.classList.add('tabs__button--active');\r\n    panel.classList.add('tabs__panel--active');\r\n    panel.removeAttribute('hidden');\r\n  }\r\n\r\n  \/**\r\n   * Handles the click events.\r\n   *\r\n   * @param {object} event The event object.\r\n   * @return {boolean} Whether a subsequent action was carried out.\r\n   * @memberof Tabs\r\n   *\/\r\n  handleClickEvents(event) {\r\n    const target = event.target;\r\n\r\n    if (target && target.classList.contains('tabs__button')) {\r\n      this.showTabContent(target);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  \/**\r\n   * Navigates between tabs using the keyboard.\r\n   *\r\n   * @param {any} event The event object.\r\n   * @returns {boolean} Whether a subsequent action was carried out.\r\n   * @memberof Tabs\r\n   *\/\r\n  handleKeyupEvents(event) {\r\n    const key = event.keyCode,\r\n      target = event.target;\r\n\r\n    let newTarget;\r\n\r\n    switch (key) {\r\n      case this.keyCodes.RIGHT:\r\n        if (target === this.lastItem) {\r\n          newTarget = this.firstItem;\r\n        } else {\r\n          newTarget = target.nextElementSibling;\r\n        }\r\n\r\n        newTarget.focus();\r\n        this.showTabContent(newTarget);\r\n        return true;\r\n\r\n      case this.keyCodes.LEFT:\r\n        if (target === this.firstItem) {\r\n          newTarget = this.lastItem;\r\n        } else {\r\n          newTarget = target.previousElementSibling;\r\n        }\r\n\r\n        newTarget.focus();\r\n        this.showTabContent(newTarget);\r\n        return true;\r\n\r\n      case this.keyCodes.HOME:\r\n        newTarget = this.firstItem;\r\n        newTarget.focus();\r\n        this.showTabContent(newTarget);\r\n        return true;\r\n\r\n      case this.keyCodes.END:\r\n        newTarget = this.lastItem;\r\n        newTarget.focus();\r\n        this.showTabContent(newTarget);\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Tabs;\r\n"
      }
    }
  },
  "carousel": {
    "title": "Carousel",
    "content": {
      "data": [
        {
          "image_url": "https://picsum.photos/2000/3000?image=1081",
          "image_alt": "A building."
        },
        {
          "image_url": "https://picsum.photos/2000/3000?image=1060",
          "image_alt": "Pour over coffee being made."
        },
        {
          "image_url": "https://picsum.photos/2000/3000?image=1039",
          "image_alt": "A waterfall."
        },
        {
          "image_url": "https://picsum.photos/2000/3000?image=1020",
          "image_alt": "A bear in the wilderness."
        },
        {
          "image_url": "https://picsum.photos/2000/3000?image=974",
          "image_alt": "The Milky Way."
        }
      ]
    },
    "code": {
      "templated": {
        "language": "handlebars",
        "code": "<div class=\"component__content\">\r\n    <div class=\"carousel\">\r\n      {{#each content.data}}\r\n        <img class=\"carousel__slide\" src=\"{{image_url}}\" alt=\"{{image_alt}}\">\r\n      {{\/each}}\r\n    <\/div>\r\n  <\/div>"
      },
      "styles": {
        "language": "scss",
        "code": "\/\/ ============================================================================\r\n\/\/ CAROUSEL\r\n\/\/ ============================================================================\r\n\r\n.component {\r\n\r\n  &--carousel {\r\n    .component__content {\r\n      overflow: hidden;\r\n    }\r\n  }\r\n}\r\n\r\n.smooth {\r\n  transition: transform calc(var(--f, 1) * 0.5s) ease-in-out;\r\n}\r\n\r\n.carousel {\r\n  --n: 1;\r\n\r\n  align-items: center;\r\n  display: flex;\r\n  height: 50vw;\r\n  max-height: 100vh;\r\n  overflow-y: hidden;\r\n  transform: translate(calc(var(--i, 0) \/ var(--n) * -100% + var(--tx, 0px)));\r\n  \/\/ width: 100%;\r\n  width: calc(var(--n) * 100%);\r\n\r\n  \/\/ --n needs to cascade down here.\r\n  .carousel__slide {\r\n    \/\/ width: 100%;\r\n    pointer-events: none;\r\n    width: calc(100% \/ var(--n));\r\n  }\r\n}\r\n"
      },
      "scripts": {
        "language": "javascript",
        "code": "\/**\r\n * Carousel\r\n *\r\n * {@link} https:\/\/css-tricks.com\/simple-swipe-with-vanilla-javascript\/\r\n * @class Carousel\r\n *\/\r\nclass Carousel {\r\n  constructor() {\r\n    this.instance = document.querySelector('.carousel');\r\n    this.imageCount = this.instance.children.length;\r\n    this.xCoord = null;\r\n    this.i = 0;\r\n    this.locked = false;\r\n    this.windowWidth;\r\n\r\n    this.size();\r\n\r\n    this.instance.style.setProperty('--n', this.imageCount);\r\n\r\n    this.instance.addEventListener('mousedown', this.lock.bind(this));\r\n    this.instance.addEventListener('touchstart', this.lock.bind(this));\r\n\r\n    this.instance.addEventListener('mouseup', this.move.bind(this));\r\n    this.instance.addEventListener('touchend', this.move.bind(this));\r\n\r\n    this.instance.addEventListener('mousemove', this.drag.bind(this));\r\n    this.instance.addEventListener('touchmove', this.drag.bind(this));\r\n\r\n    this.instance.addEventListener('touchmove', event =>\r\n      event.preventDefault()\r\n    );\r\n\r\n    window.addEventListener('resize', this.size);\r\n  }\r\n\r\n  \/**\r\n   * Updates the xCoord and toggles the smooth class.\r\n   *\r\n   * @param {object} event The event object.\r\n   * @memberof Carousel\r\n   *\/\r\n  lock(event) {\r\n    this.xCoord = this.unify(event).clientX;\r\n\r\n    this.instance.classList.toggle('smooth', !(this.locked = true));\r\n  }\r\n\r\n  \/**\r\n   * Updates CSS variables to advance the carousel slide.\r\n   *\r\n   * @param {object} event The event object.\r\n   * @memberof Carousel\r\n   *\/\r\n  move(event) {\r\n    if (this.locked) {\r\n      let dx = this.unify(event).clientX - this.xCoord,\r\n        s = Math.sign(dx),\r\n        f = +(s * dx \/ this.windowWidth).toFixed(2);\r\n\r\n      if (\r\n        (this.i > 0 || s < 0) &&\r\n        (this.i < this.imageCount - 1 || s > 0) &&\r\n        f > 0.2\r\n      ) {\r\n        this.instance.style.setProperty('--i', (this.i -= s));\r\n        f = 1 - f;\r\n      }\r\n      this.instance.style.setProperty('--tx', '0px');\r\n      this.instance.style.setProperty('--f', f);\r\n      this.instance.classList.toggle('smooth', !(this.locked = false));\r\n      this.xCoord = null;\r\n    }\r\n  }\r\n\r\n  \/**\r\n   * Unifies the touch and mouse events\r\n   *\r\n   * @param {object} event The event object.\r\n   * @returns\r\n   * @memberof Carousel\r\n   *\/\r\n  unify(event) {\r\n    return event.changedTouches ? event.changedTouches[0] : event;\r\n  }\r\n\r\n  \/**\r\n   * Prevents drag from activating browser forward \/ back.\r\n   *\r\n   * @param {object} event The event object.\r\n   * @memberof Carousel\r\n   *\/\r\n  drag(event) {\r\n    event.preventDefault();\r\n\r\n    if (this.locked) {\r\n      this.instance.style.setProperty(\r\n        '--tx',\r\n        `${Math.round(this.unify(event).clientX - this.xCoord)}px`\r\n      );\r\n    }\r\n  }\r\n\r\n  \/**\r\n   * Updates the window width.\r\n   *\r\n   * @memberof Carousel\r\n   *\/\r\n  size() {\r\n    this.windowWidth = window.innerWidth;\r\n  }\r\n}\r\n\r\nexport default Carousel;\r\n"
      }
    }
  },
  "menu": {
    "title": "Menu",
    "content": {
      "data": [
        {
          "link": "#lorem",
          "label": "Lorem",
          "children": [
            {
              "link": "#dolor",
              "label": "Dolor"
            },
            {
              "link": "#sit",
              "label": "Sit"
            },
            {
              "link": "#amet",
              "label": "Amet"
            }
          ]
        },
        {
          "link": "#ipsum",
          "label": "Ipsum"
        },
        {
          "link": "#dolor",
          "label": "Dolor"
        },
        {
          "link": "#sit",
          "label": "Sit",
          "children": [
            {
              "link": "#lorem",
              "label": "Lorem"
            },
            {
              "link": "#ipsum",
              "label": "Ipsum"
            }
          ]
        },
        {
          "link": "#amet",
          "label": "Amet"
        }
      ]
    },
    "meta": {
      "label": "Menu example"
    }
  }
}
